{"version":3,"sources":["index.js"],"names":["App","nameize","items","map","item","name","getPermutations","string","results","length","push","i","firstChar","charsLeft","substring","innerPermutations","j","renderPermuations","permutations","index","key","state","swaras","type","value","this","onChange","event","setState","target","Component","render","document","getElementById"],"mappings":"2NAIMA,G,wDACJ,aAAe,IAAD,8BACZ,gBAMFC,QAAU,SAACC,GACT,OAAOA,EAAMC,KAAI,SAAAC,GACf,MAAO,CAACC,KAAMD,OATJ,EAadE,gBAAkB,SAACC,GACjB,GAAe,KAAXA,EACF,MAAO,GAGT,IAAIC,EAAU,GAEd,GAAsB,IAAlBD,EAAOE,OAET,OADAD,EAAQE,KAAKH,GACNC,EAGT,IAAK,IAAIG,EAAI,EAAGA,EAAIJ,EAAOE,OAAQE,IAIjC,IAHA,IAAIC,EAAYL,EAAOI,GACnBE,EAAYN,EAAOO,UAAU,EAAGH,GAAKJ,EAAOO,UAAUH,EAAI,GAC1DI,EAAoB,EAAKT,gBAAgBO,GACpCG,EAAI,EAAGA,EAAID,EAAkBN,OAAQO,IAC5CR,EAAQE,KAAKE,EAAYG,EAAkBC,IAG/C,OAAOR,GAjCK,EAoCdS,kBAAqB,SAACC,GACpB,OAAOA,EAAaf,KAAI,SAACC,EAAMe,GAC7B,OACE,wBAAIC,IAAKD,GAAT,IAAkBf,EAAlB,SArCJ,EAAKiB,MAAQ,CACXC,OAAQ,IAHE,E,qDA4CJ,IAAD,OACP,OACE,6BACE,yCAEE,2BAAOC,KAAK,OAAOC,MAAOC,KAAKJ,MAAMC,OAAQI,SAAU,SAACC,GAAD,OAAW,EAAKC,SAAS,CAACN,OAAQK,EAAME,OAAOL,YAExG,4BACCC,KAAKR,kBAAkBQ,KAAKnB,gBAAgBmB,KAAKJ,MAAMC,e,GArD9CQ,cA4DlBC,iBAAO,kBAAC/B,EAAD,MAASgC,SAASC,eAAe,W","file":"static/js/main.2d2243e2.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { render } from 'react-dom';\nimport './style.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      swaras: ''\n    };\n  }\n\n  nameize = (items) => {\n    return items.map(item => {\n      return {name: item}\n    });\n  }\n\n  getPermutations = (string) => {\n    if (string === '') {\n      return []\n    }\n\n    var results = [];\n\n    if (string.length === 1) {\n      results.push(string);\n      return results;\n    }\n\n    for (var i = 0; i < string.length; i++) {\n      var firstChar = string[i];\n      var charsLeft = string.substring(0, i) + string.substring(i + 1);\n      var innerPermutations = this.getPermutations(charsLeft);\n      for (var j = 0; j < innerPermutations.length; j++) {\n        results.push(firstChar + innerPermutations[j]);\n      }\n    }\n    return results;\n  }\n\n  renderPermuations =  (permutations) => {\n    return permutations.map((item, index) => {\n      return (\n        <li key={index}> {item} </li>\n      )\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <label>\n          Swaras:\n          <input type=\"text\" value={this.state.swaras} onChange={(event) => this.setState({swaras: event.target.value})} />\n        </label>\n        <ul>\n        {this.renderPermuations(this.getPermutations(this.state.swaras))}\n        </ul>\n      </div>\n    );\n  }\n}\n\nrender(<App />, document.getElementById('root'));\n"],"sourceRoot":""}